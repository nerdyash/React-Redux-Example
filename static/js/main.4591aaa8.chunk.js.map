{"version":3,"sources":["logo.svg","actions/types.js","reducers/postReducer.js","reducers/index.js","store.js","components/Posts.js","actions/postAction.js","components/PostForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FETCH_POSTS","NEW_POST","initState","items","item","combineReducers","posts","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","Posts","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchPosts","newProps","newPost","unshift","postData","map","post","react_default","a","createElement","key","id","title","body","Fragment","Component","connect","dispatch","axios","get","then","res","data","PostForm","change","bind","assertThisInitialized","submit","e","setState","defineProperty","target","name","value","preventDefault","uuid","v4","createPost","onSubmit","onChange","className","App","es","src","logo","alt","href","rel","components_PostForm","components_Posts","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4591aaa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const FETCH_POSTS = 'FETCH_POSTS';\nexport const NEW_POST = 'NEW_POST';","import { FETCH_POSTS, NEW_POST } from '../actions/types';\n\nconst initState = {\n    items: [],\n    item: {}\n}\n\nexport default function(state = initState, action) {\n    switch(action.type) {\n        case FETCH_POSTS:\n            return {\n                ...state,\n                items: action.payload\n            }\n        case NEW_POST: \n            return {\n                ...state,\n                item: action.payload   \n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport postReducer from './postReducer';\n\nexport default combineReducers({\n    posts: postReducer\n})","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, \n    initState, \n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n    );\n\nexport default store;","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postAction';\n// import axios from 'axios';\n\nclass Posts extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            posts: []\n        }\n    }\n    \n    componentWillMount() {\n        this.props.fetchPosts();\n    // Moving this into the action to work with Redux\n    //     axios.get('https://jsonplaceholder.typicode.com/posts?_limit=10')\n    //         .then(res => this.setState({posts: res.data}));\n    }\n\n    componentWillReceiveProps(newProps) {\n        if(newProps.newPost) {\n            this.props.posts.unshift(newProps.newPost);\n        }\n    }\n\n    render() {\n        // Commenting because we don't need it for redux\n        // const postData = this.state.posts.map(post => (\n        //     <div key={post.id}>\n        //         <h2>{post.title}</h2>\n        //         <p>{post.body}</p>\n        //     </div>\n        // ));\n        const postData = this.props.posts.map(post => (\n            <div key={post.id}>\n                <h2>{post.title}</h2>\n                <p>{post.body}</p>\n            </div>\n        ));\n        return (\n            <React.Fragment>\n                <h1>Posts</h1>\n                {postData}\n            </React.Fragment>\n        )\n    }\n}\n\nPosts.propTypes = {\n    fetchPosts: propTypes.func.isRequired,\n    posts: propTypes.array.isRequired,\n    newPost: propTypes.object\n}\n\nconst mapStateToProps = state => ({\n    posts: state.posts.items,\n    newPost: state.posts.item.post\n})\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\n","import { FETCH_POSTS, NEW_POST } from './types';\nimport axios from 'axios';\n\nexport function fetchPosts() {\n    return function(dispatch) {\n        axios.get('https://jsonplaceholder.typicode.com/posts?_limit=10')\n            .then(res => dispatch({\n                type:FETCH_POSTS, \n                payload: res.data\n            }));\n    }\n}\n\nexport function createPost(post) {\n    return function(dispatch) {\n        axios.post('https://jsonplaceholder.typicode.com/posts', {\n            post\n        })\n            .then(res => dispatch({\n                type:NEW_POST, \n                payload: res.data\n            }));\n    }\n}","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createPost } from '../actions/postAction';\n// import axios from 'axios';\n// import Posts from './Posts';\nimport uuid from 'uuid';\n\nclass PostForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            body: ''\n        }\n\n        this.change = this.change.bind(this);\n        this.submit = this.submit.bind(this);\n    }\n    // on change update the state value\n    change(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n    submit(e) {\n        e.preventDefault();\n        const post = {\n            title: this.state.title,\n            body: this.state.body,\n            id: uuid.v4()\n        }\n        this.props.createPost(post);\n        // Moving this into reducer for Redux\n        // axios.post('https://jsonplaceholder.typicode.com/posts', {\n        //     headers: {\n        //         'content-type': 'application/json'\n        //     },\n        //     post\n        // })\n        //     .then(res => console.log(res.data))\n    }\n    render() {\n        return (\n            <div>\n                <h2>Add Post</h2>\n                <form onSubmit={this.submit}>\n                    <div>\n                        <label>Title :</label> <br />\n                        <input name='title' onChange={this.change} value={this.state.value} />\n                    </div> <br />\n                    <div>\n                        <label>Post :</label> <br />\n                        <textarea name='body' onChange={this.change} value={this.state.value} />\n                    </div> <br />\n                    <button type=\"submit\" className='btn'>Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nPostForm.propTypes = {\n    createPost: propTypes.func.isRequired,\n    post: propTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    post: state.posts.item\n});\n\nexport default connect(mapStateToProps, { createPost })(PostForm);","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Posts from './components/Posts';\nimport PostForm from './components/PostForm';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <PostForm />\n        <hr />\n        <Posts />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}